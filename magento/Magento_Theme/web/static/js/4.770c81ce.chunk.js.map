{"version":3,"sources":["../node_modules/@scandipwa/scandipwa/src/component/ExpandableContent/index.js","../node_modules/@scandipwa/scandipwa/src/component/ExpandableContent/ExpandableContent.component.js","../node_modules/@scandipwa/scandipwa/src/route/CategoryPage/CategoryPage.config.js","../node_modules/@scandipwa/scandipwa/src/component/ProductConfigurableAttributes/ProductConfigurableAttributes.container.js","../node_modules/@scandipwa/scandipwa/src/component/ProductConfigurableAttributes/ProductConfigurableAttributes.component.js","../node_modules/@scandipwa/scandipwa/src/component/ProductConfigurableAttributeDropdown/ProductConfigurableAttributeDropdown.container.js","../node_modules/@scandipwa/scandipwa/src/component/ProductConfigurableAttributeDropdown/index.js","../node_modules/@scandipwa/scandipwa/src/component/ProductConfigurableAttributeDropdown/ProductConfigurableAttributeDropdown.component.js"],"names":["ExpandableContent","expandableContentRef","createRef","toggleExpand","onClick","props","setState","isContentExpanded","scrollToExpandedContent","this","state","prevIsContentExpanded","elem","current","elemToWindowTopDist","getBoundingClientRect","top","windowToPageTopDist","document","body","topToElemDistance","getFixedElementHeight","totalFixedElementHeight","total","bottomFixedElementHeight","bottom","elemMaxOffsetHeight","screen","height","offsetHeight","scrollTo","window","behavior","heading","subHeading","mix","block","mods","content","length","children","ref","renderButton","renderContent","defaultProps","Object","defineProperty","_ExpandableContent","value","LOADING_TIME","DISPLAY_MODE_PRODUCTS","DISPLAY_MODE_CMS_BLOCK","DISPLAY_MODE_BOTH","ProductConfigurableAttributesContainer","containerFunctions","handleOptionClick","bind","getSubHeading","isSelected","getLink","attribute_code","attribute_value","attribute_values","attribute_options","reduce","acc","label","join","updateConfigurableVariant","parameters","parameter","undefined","includes","_ProductConfigurableAttributesContainer","ProductConfigurableAttributes","attribute","getIsConfigurableAttributeAvailable","key","isAvailable","option","map","renderConfigurableAttributeValue","numberOfPlaceholders","i","Array","from","_","configurable_options","values","attribute_label","isSwatch","swatch_data","renderSwatch","renderDropdown","isReady","isLoading","renderConfigurableAttributes","renderPlaceholders","_ProductConfigurableAttributes","ProductConfigurableAttributeDropdownContainer","onChange","containerProps","selectValue","_getSelectValue","selectOptions","_getSelectOptions","selectName","selectLabel","id","console","warn","_ProductConfigurableAttributeDropdownContainer","ProductConfigurableAttributeDropdown","name","type","placeholder","__","toLowerCase","_ProductConfigurableAttributeDropdown"],"mappings":"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","file":"static/js/4.770c81ce.chunk.js","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nexport { default } from './ExpandableContent.component';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\n\nimport TextPlaceholder from 'Component/TextPlaceholder';\nimport { ChildrenType, MixType } from 'Type/Common';\nimport { getFixedElementHeight } from 'Util/CSS';\n\nimport './ExpandableContent.style';\n/** @namespace Component/ExpandableContent/Component */\nexport class ExpandableContent extends PureComponent {\n    static propTypes = {\n        isContentExpanded: PropTypes.bool,\n        heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n        subHeading: PropTypes.string,\n        children: ChildrenType.isRequired,\n        mix: MixType.isRequired,\n        onClick: (props, propName, componentName) => {\n            const propValue = props[propName];\n            if (propValue === null) {\n                return;\n            }\n            if (typeof propValue === 'function') {\n                return;\n            }\n            throw new Error(`${componentName} only accepts null or string`);\n        }\n    };\n\n    static defaultProps = {\n        subHeading: '',\n        heading: '',\n        isContentExpanded: false,\n        onClick: null\n    };\n\n    expandableContentRef = createRef();\n\n    __construct(props) {\n        super.__construct(props);\n        const { isContentExpanded } = this.props;\n        this.state = {\n            isContentExpanded,\n            // eslint-disable-next-line react/no-unused-state\n            prevIsContentExpanded: isContentExpanded\n        };\n    }\n\n    static getDerivedStateFromProps({ isContentExpanded }, { prevIsContentExpanded }) {\n        if (isContentExpanded !== prevIsContentExpanded) {\n            return {\n                prevIsContentExpanded: isContentExpanded,\n                isContentExpanded\n            };\n        }\n\n        return null;\n    }\n\n    scrollToExpandedContent() {\n        const { isContentExpanded } = this.state;\n        const elem = this.expandableContentRef && this.expandableContentRef.current;\n\n        if (isContentExpanded && !elem) {\n            return;\n        }\n\n        const elemToWindowTopDist = elem.getBoundingClientRect().top;\n        const windowToPageTopDist = document.body.getBoundingClientRect().top;\n        const topToElemDistance = elemToWindowTopDist - windowToPageTopDist;\n        const {\n            total: totalFixedElementHeight,\n            bottom: bottomFixedElementHeight\n        } = getFixedElementHeight();\n\n        const elemMaxOffsetHeight = screen.height > elem.offsetHeight + bottomFixedElementHeight\n            ? elem.offsetHeight\n            : screen.height - totalFixedElementHeight;\n        const scrollTo = topToElemDistance - (screen.height - bottomFixedElementHeight - elemMaxOffsetHeight);\n\n        // checking if button is in a view-port\n        if (-windowToPageTopDist >= scrollTo) {\n            return;\n        }\n\n        window.scrollTo({ behavior: 'smooth', top: scrollTo });\n    }\n\n    toggleExpand = () => {\n        const { onClick } = this.props;\n        if (onClick) {\n            onClick();\n            return;\n        }\n        this.setState(\n            ({ isContentExpanded }) => ({ isContentExpanded: !isContentExpanded }),\n            () => this.scrollToExpandedContent()\n        );\n    };\n\n    renderButton() {\n        const { isContentExpanded } = this.state;\n        const {\n            heading,\n            subHeading,\n            mix\n        } = this.props;\n\n        return (\n            <button\n              block=\"ExpandableContent\"\n              elem=\"Button\"\n              mods={ { isContentExpanded } }\n              mix={ { ...mix, elem: 'ExpandableContentButton' } }\n              onClick={ this.toggleExpand }\n            >\n                <span\n                  block=\"ExpandableContent\"\n                  elem=\"Heading\"\n                  mix={ { ...mix, elem: 'ExpandableContentHeading' } }\n                >\n                    { typeof heading === 'string' ? (\n                        <TextPlaceholder content={ heading } length=\"medium\" />\n                    ) : (\n                        heading\n                    ) }\n                </span>\n                <span\n                  block=\"ExpandableContent\"\n                  elem=\"SubHeading\"\n                  mix={ { ...mix, elem: 'ExpandableContentSubHeading' } }\n                >\n                    { subHeading }\n                </span>\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, mix } = this.props;\n        const { isContentExpanded } = this.state;\n        const mods = { isContentExpanded };\n        return (\n            <div\n              block=\"ExpandableContent\"\n              elem=\"Content\"\n              mods={ mods }\n              mix={ { ...mix, elem: 'ExpandableContentContent', mods } }\n            >\n                { children }\n            </div>\n        );\n    }\n\n    render() {\n        const { mix } = this.props;\n        return (\n            <article\n              block=\"ExpandableContent\"\n              mix={ mix }\n              ref={ this.expandableContentRef }\n            >\n                { this.renderButton() }\n                { this.renderContent() }\n            </article>\n        );\n    }\n}\nexport default ExpandableContent;\n","/* eslint-disable import/prefer-default-export */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nexport const LOADING_TIME = 500;\n\nexport const DISPLAY_MODE_PRODUCTS = 'PRODUCTS';\n\nexport const DISPLAY_MODE_CMS_BLOCK = 'PAGE';\n\nexport const DISPLAY_MODE_BOTH = 'PRODUCTS_AND_PAGE';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ProductConfigurableAttributes from './ProductConfigurableAttributes.component';\n\n/** @namespace Component/ProductConfigurableAttributes/Container */\nexport class ProductConfigurableAttributesContainer extends PureComponent {\n    static propTypes = {\n        getLink: PropTypes.func.isRequired,\n        parameters: PropTypes.shape({}).isRequired,\n        updateConfigurableVariant: PropTypes.func.isRequired\n    };\n\n    containerFunctions = {\n        handleOptionClick: this.handleOptionClick.bind(this),\n        getSubHeading: this.getSubHeading.bind(this),\n        isSelected: this.isSelected.bind(this),\n        getLink: this.getLink.bind(this)\n    };\n\n    getLink({ attribute_code, attribute_value }) {\n        const { getLink } = this.props;\n        return getLink(attribute_code, attribute_value);\n    }\n\n    getSubHeading({ attribute_values, attribute_code, attribute_options }) {\n        return attribute_values.reduce((acc, attribute_value) => (\n            this.isSelected({ attribute_code, attribute_value })\n                ? [...acc, attribute_options[attribute_value].label]\n                : acc\n        ), []).join(', ');\n    }\n\n    handleOptionClick({ attribute_code, attribute_value }) {\n        const { updateConfigurableVariant } = this.props;\n        updateConfigurableVariant(attribute_code, attribute_value);\n    }\n\n    isSelected({ attribute_code, attribute_value }) {\n        const { parameters = {} } = this.props;\n        const parameter = parameters[attribute_code];\n\n        if (parameter === undefined) {\n            return false;\n        }\n        if (parameter.length !== undefined) {\n            return parameter.includes(attribute_value);\n        }\n\n        return parameter === attribute_value;\n    }\n\n    render() {\n        return (\n            <ProductConfigurableAttributes\n              { ...this.props }\n              { ...this.containerFunctions }\n            />\n        );\n    }\n}\n\nexport default ProductConfigurableAttributesContainer;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ExpandableContent from 'Component/ExpandableContent';\nimport ProductAttributeValue from 'Component/ProductAttributeValue';\nimport ProductConfigurableAttributeDropdown from 'Component/ProductConfigurableAttributeDropdown';\nimport { MixType } from 'Type/Common';\nimport { AttributeType } from 'Type/ProductList';\n\nimport './ProductConfigurableAttributes.style';\n\n/** @namespace Component/ProductConfigurableAttributes/Component */\nexport class ProductConfigurableAttributes extends PureComponent {\n    static propTypes = {\n        isContentExpanded: PropTypes.bool,\n        numberOfPlaceholders: PropTypes.arrayOf(PropTypes.number),\n        configurable_options: PropTypes.objectOf(AttributeType).isRequired,\n        parameters: PropTypes.shape({}).isRequired,\n        updateConfigurableVariant: PropTypes.func.isRequired,\n        isReady: PropTypes.bool,\n        mix: MixType,\n        getIsConfigurableAttributeAvailable: PropTypes.func,\n        handleOptionClick: PropTypes.func.isRequired,\n        getSubHeading: PropTypes.func.isRequired,\n        isSelected: PropTypes.func.isRequired,\n        getLink: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        isReady: true,\n        mix: {},\n        // eslint-disable-next-line no-magic-numbers\n        numberOfPlaceholders: [6, 10, 7],\n        isContentExpanded: false,\n        getIsConfigurableAttributeAvailable: () => true\n    };\n\n    renderConfigurableAttributeValue(attribute) {\n        const {\n            getIsConfigurableAttributeAvailable,\n            handleOptionClick,\n            getLink,\n            isSelected\n        } = this.props;\n\n        const { attribute_value } = attribute;\n\n        return (\n            <ProductAttributeValue\n              key={ attribute_value }\n              attribute={ attribute }\n              isSelected={ isSelected(attribute) }\n              isAvailable={ getIsConfigurableAttributeAvailable(attribute) }\n              onClick={ handleOptionClick }\n              getLink={ getLink }\n            />\n        );\n    }\n\n    renderSwatch(option) {\n        const { attribute_values } = option;\n\n        return (\n            <div\n              block=\"ProductConfigurableAttributes\"\n              elem=\"SwatchList\"\n            >\n                { attribute_values.map((attribute_value) => (\n                    this.renderConfigurableAttributeValue({ ...option, attribute_value })\n                )) }\n            </div>\n        );\n    }\n\n    renderDropdown(option) {\n        const {\n            updateConfigurableVariant,\n            getIsConfigurableAttributeAvailable,\n            parameters\n        } = this.props;\n\n        return (\n            <ProductConfigurableAttributeDropdown\n              option={ option }\n              updateConfigurableVariant={ updateConfigurableVariant }\n              getIsConfigurableAttributeAvailable={ getIsConfigurableAttributeAvailable }\n              parameters={ parameters }\n            />\n        );\n    }\n\n    renderPlaceholders() {\n        const { numberOfPlaceholders, isContentExpanded } = this.props;\n\n        return numberOfPlaceholders.map((length, i) => (\n            <ExpandableContent\n              // eslint-disable-next-line react/no-array-index-key\n              key={ i }\n              mix={ {\n                  block: 'ProductConfigurableAttributes',\n                  elem: 'Expandable'\n              } }\n              isContentExpanded={ isContentExpanded }\n            >\n                <div\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={ i }\n                  block=\"ProductConfigurableAttributes\"\n                  elem=\"SwatchList\"\n                >\n                    { Array.from({ length }, (_, i) => (\n                        <div\n                          // eslint-disable-next-line react/no-array-index-key\n                          key={ i }\n                          block=\"ProductConfigurableAttributes\"\n                          elem=\"Placeholder\"\n                        />\n                    )) }\n                </div>\n            </ExpandableContent>\n        ));\n    }\n\n    renderConfigurableAttributes() {\n        const {\n            configurable_options,\n            isContentExpanded,\n            getSubHeading\n        } = this.props;\n\n        return Object.values(configurable_options).map((option) => {\n            const {\n                attribute_label,\n                attribute_code,\n                attribute_options\n            } = option;\n\n            const [{ swatch_data }] = attribute_options ? Object.values(attribute_options) : [{}];\n            const isSwatch = !!swatch_data;\n\n            return (\n                <ExpandableContent\n                  key={ attribute_code }\n                  heading={ attribute_label }\n                  subHeading={ getSubHeading(option) }\n                  mix={ {\n                      block: 'ProductConfigurableAttributes',\n                      elem: 'Expandable'\n                  } }\n                  isContentExpanded={ isContentExpanded }\n                >\n                    { isSwatch ? this.renderSwatch(option) : this.renderDropdown(option) }\n                </ExpandableContent>\n            );\n        });\n    }\n\n    render() {\n        const { isReady, mix } = this.props;\n\n        return (\n            <div\n              block=\"ProductConfigurableAttributes\"\n              mods={ { isLoading: !isReady } }\n              mix={ mix }\n            >\n                { isReady ? this.renderConfigurableAttributes() : this.renderPlaceholders() }\n            </div>\n        );\n    }\n}\n\nexport default ProductConfigurableAttributes;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { AttributeType } from 'Type/ProductList';\n\nimport ProductConfigurableAttributeDropdown from './ProductConfigurableAttributeDropdown.component';\n\n/** @namespace Component/ProductConfigurableAttributeDropdown/Container */\nexport class ProductConfigurableAttributeDropdownContainer extends PureComponent {\n    static propTypes = {\n        option: AttributeType.isRequired,\n        updateConfigurableVariant: PropTypes.func.isRequired,\n        getIsConfigurableAttributeAvailable: PropTypes.func.isRequired,\n        parameters: PropTypes.objectOf(PropTypes.string).isRequired\n    };\n\n    containerFunctions = {\n        onChange: this.onChange.bind(this)\n    };\n\n    onChange(value) {\n        const {\n            updateConfigurableVariant,\n            option: { attribute_code }\n        } = this.props;\n\n        updateConfigurableVariant(attribute_code, value);\n    }\n\n    containerProps = () => {\n        const { option: { attribute_code, attribute_label } } = this.props;\n\n        return {\n            selectValue: this._getSelectValue(),\n            selectOptions: this._getSelectOptions(),\n            selectName: attribute_code,\n            selectLabel: attribute_label\n        };\n    };\n\n    _getSelectOptions = () => {\n        const {\n            option: {\n                attribute_options,\n                attribute_code\n            },\n            getIsConfigurableAttributeAvailable\n        } = this.props;\n\n        if (!attribute_options) {\n            // eslint-disable-next-line no-console\n            console.warn(`Please make sure \"${ attribute_code }\" is visible on Storefront.`);\n            return [];\n        }\n\n        return Object.values(attribute_options)\n            .reduce((acc, option) => {\n                const { value } = option;\n\n                const isAvailable = getIsConfigurableAttributeAvailable({\n                    attribute_code,\n                    attribute_value: value\n                });\n\n                if (!isAvailable) {\n                    return acc;\n                }\n\n                return [...acc, {\n                    ...option,\n                    id: value\n                }];\n            }, []);\n    };\n\n    _getSelectValue = () => {\n        const { option: { attribute_code } } = this.props;\n        const { parameters = {} } = this.props;\n        return parameters[attribute_code];\n    };\n\n    render() {\n        return (\n            <ProductConfigurableAttributeDropdown\n              { ...this.props }\n              { ...this.containerFunctions }\n              { ...this.containerProps() }\n            />\n        );\n    }\n}\n\nexport default ProductConfigurableAttributeDropdownContainer;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nexport { default } from './ProductConfigurableAttributeDropdown.container';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport Field from 'Component/Field';\n\nimport './ProductConfigurableAttributeDropdown.style';\n\n/** @namespace Component/ProductConfigurableAttributeDropdown/Component */\nexport class ProductConfigurableAttributeDropdown extends PureComponent {\n    static propTypes = {\n        onChange: PropTypes.func.isRequired,\n        selectOptions: PropTypes.arrayOf(PropTypes.shape({\n            label: PropTypes.string,\n            id: PropTypes.string,\n            value: PropTypes.string\n        })).isRequired,\n        selectValue: PropTypes.string,\n        selectLabel: PropTypes.string,\n        selectName: PropTypes.string.isRequired\n    };\n\n    static defaultProps = {\n        selectValue: '',\n        selectLabel: 'attribute'\n    };\n\n    render() {\n        const {\n            selectOptions,\n            selectValue,\n            selectName,\n            selectLabel,\n            onChange\n        } = this.props;\n\n        return (\n            <Field\n              id={ selectName }\n              name={ selectName }\n              type=\"select\"\n              placeholder={ __('Choose %s', selectLabel.toLowerCase()) }\n              mix={ { block: 'ProductConfigurableAttributeDropdown' } }\n              selectOptions={ selectOptions }\n              value={ selectValue }\n              onChange={ onChange }\n            />\n        );\n    }\n}\n\nexport default ProductConfigurableAttributeDropdown;\n"],"sourceRoot":""}